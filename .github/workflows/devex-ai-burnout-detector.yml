name: AI Burnout Detector - Team Wellness Analysis

on:
  pull_request:
    types:
      - 'opened'
      - 'reopened'
  # Note: issue_comment and pull_request_review_comment types are included,
  # but they are very chatty and can trigger many unnecessary runs.
  issue_comment:
    types:
      - 'created'
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted' 
  workflow_dispatch:
    inputs:
      analysis_period:
        description: 'Analysis period in days'
        required: false
        default: '7'
        type: string
      email_recipient:
        description: 'Email recipient for reports'
        required: false
        default: 'team-leads@company.com'
        type: string

env:
  # FIX: Use 'github.event.inputs' for workflow_dispatch, and fallback to defaults
  ANALYSIS_PERIOD: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.analysis_period || '7' }}
  EMAIL_RECIPIENT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.email_recipient || 'team-leads@company.com' }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_NAME: ${{ github.event.repository.name }}

jobs:
  analyze-team-wellness:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: read
      actions: read
    
    steps:
      - name: Debug Workflow Trigger
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          # FIX: Check for GROQ_API_KEY existence using 'secrets' context
          echo "GROQ_API_KEY exists: ${{ secrets.GROQ_API_KEY != '' }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install axios groq-sdk

      - name: Fetch GitHub Data
        id: fetch-data
        # FIX: Explicitly pass GITHUB_TOKEN and other variables to the script environment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          ANALYSIS_PERIOD: ${{ env.ANALYSIS_PERIOD }}
        run: |
          node << 'EOF'
          const axios = require('axios');
          const fs = require('fs');
          
          const token = process.env.GITHUB_TOKEN;  
          const owner = process.env.REPO_OWNER;
          const repo = process.env.REPO_NAME;
          const period = process.env.ANALYSIS_PERIOD;
          
          const since = new Date();
          since.setDate(since.getDate() - parseInt(period));
          const sinceISO = since.toISOString();
          
          async function fetchData() {
            try {
              // API URLs are correct, relies on GITHUB_TOKEN being set in the env block
              const config = { headers: { 'Authorization': `token ${token}` } };

              // Fetch commits
              const commitsResponse = await axios.get(
                `https://api.github.com/repos/${owner}/${repo}/commits`,
                { ...config, params: { since: sinceISO, per_page: 100 } }
              );
              
              // Fetch pull requests
              const prsResponse = await axios.get(
                `https://api.github.com/repos/${owner}/${repo}/pulls`,
                { ...config, params: { state: 'all', since: sinceISO, per_page: 50 } }
              );
              
              // Fetch workflow runs
              const workflowsResponse = await axios.get(
                `https://api.github.com/repos/${owner}/${repo}/actions/runs`,
                { ...config, params: { created: `${sinceISO}..*`, per_page: 50 } }
              );
              
              const data = {
                commits: commitsResponse.data,
                pullRequests: prsResponse.data,
                workflows: workflowsResponse.data.workflow_runs || [],
                analysisPeriod: parseInt(period),
                repository: `${owner}/${repo}`
              };
              
              fs.writeFileSync('github-data.json', JSON.stringify(data, null, 2));
              console.log('GitHub data fetched successfully');
              
            } catch (error) {
              console.error('Error fetching GitHub data (check GITHUB_TOKEN permissions):', error.message);
              // Do not exit 1, just log error for visibility.
            }
          }
          
          fetchData();
          EOF

      - name: Analyze Patterns
        id: analyze-patterns
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = process.env.GITHUB_OUTPUT;  
          
          const data = JSON.parse(fs.readFileSync('github-data.json', 'utf8'));
          
          // ... (Your existing JavaScript analysis code)
          
          // Calculate rates (existing code)
          const failureRate = (patterns.failed_workflows / Math.max(patterns.total_workflows, 1)) * 100;
          const lateNightRate = (patterns.late_night_commits / Math.max(patterns.total_commits, 1)) * 100;
          const weekendRate = (patterns.weekend_commits / Math.max(patterns.total_commits, 1)) * 100;
          
          // Prepare analysis data (existing code)
          const analysisData = {
            repository: data.repository,
            analysis_period_days: data.analysisPeriod,
            patterns: patterns,
            rates: {
              failure_rate: failureRate.toFixed(1),
              late_night_rate: lateNightRate.toFixed(1),
              weekend_rate: weekendRate.toFixed(1)
            },
            raw_data: {
              commits: data.commits.slice(0, 10), // Limit for AI analysis
              pull_requests: data.pullRequests.slice(0, 10),
              workflows: data.workflows.slice(0, 10)
            }
          };
          
          fs.writeFileSync('analysis-data.json', JSON.stringify(analysisData, null, 2));
          
          // FIX: Use the new GITHUB_OUTPUT file syntax for setting outputs
          fs.appendFileSync(path, `total_commits=${patterns.total_commits}\n`);
          fs.appendFileSync(path, `late_night_commits=${patterns.late_night_commits}\n`);
          fs.appendFileSync(path, `weekend_commits=${patterns.weekend_commits}\n`);
          fs.appendFileSync(path, `failed_workflows=${patterns.failed_workflows}\n`);
          fs.appendFileSync(path, `late_night_rate=${lateNightRate.toFixed(1)}\n`);
          fs.appendFileSync(path, `weekend_rate=${weekendRate.toFixed(1)}\n`);
          fs.appendFileSync(path, `failure_rate=${failureRate.toFixed(1)}\n`);
          
          console.log('Pattern analysis completed successfully');
          EOF

      - name: AI Analysis
        id: ai-analysis
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const Groq = require('groq-sdk');
          const path = process.env.GITHUB_OUTPUT; 
          
          const analysisData = JSON.parse(fs.readFileSync('analysis-data.json', 'utf8'));
          const apiKey = process.env.GROQ_API_KEY; # Now correctly set from env block
          
          if (!apiKey) {
            console.log('No Groq API key provided, using mock analysis');
            const mockAnalysis = {
              burnout_risk: 'Low',
              team_health_score: 75,
              confidence: 0.8,
              analysis: 'Mock analysis - no AI key provided',
              recommendations: [
                'Monitor late-night commit patterns',
                'Consider workload redistribution',
                'Implement wellness check-ins'
              ],
              risk_indicators: [
                'Late-night work detected',
                'Weekend work patterns'
              ]
            };
            fs.writeFileSync('ai-analysis.json', JSON.stringify(mockAnalysis, null, 2));
            
            // FIX: Use the new GITHUB_OUTPUT file syntax for setting outputs
            fs.appendFileSync(path, `burnout_risk=${mockAnalysis.burnout_risk}\n`);
            fs.appendFileSync(path, `team_health_score=${mockAnalysis.team_health_score}\n`);
            fs.appendFileSync(path, `confidence=${mockAnalysis.confidence}\n`);
            return;
          }
          
          // ... (Your existing Groq API setup and prompt)
          
          async function runAnalysis() {
            try {
              // ... (Groq API call and JSON parsing logic)
              
              // FIX: Use the new GITHUB_OUTPUT file syntax for setting outputs
              fs.appendFileSync(path, `burnout_risk=${analysis.burnout_risk || 'Medium'}\n`);
              fs.appendFileSync(path, `team_health_score=${analysis.team_health_score || 70}\n`);
              fs.appendFileSync(path, `confidence=${analysis.confidence || 0.7}\n`);
              
              console.log('AI analysis completed successfully');
              
            } catch (error) {
              console.error('Error in AI analysis:', error.message);
              const fallbackAnalysis = { /* ... fallback data ... */ };
              fs.writeFileSync('ai-analysis.json', JSON.stringify(fallbackAnalysis, null, 2));
              
              // FIX: Use the new GITHUB_OUTPUT file syntax for setting outputs
              fs.appendFileSync(path, `burnout_risk=Medium\n`);
              fs.appendFileSync(path, `team_health_score=70\n`);
              fs.appendFileSync(path, `confidence=0.5\n`);
            }
          }
          
          runAnalysis();
          EOF

      - name: Create GitHub Issue
        if: always()
        uses: actions/github-script@v7
        with: 
          script: |
            const fs = require('fs');
            // 'github' and 'context' are available by default
            const healthScore = Number(core.getInput('health-score'));
            const burnoutRisk = core.getInput('burnout-risk');
            const confidence = Number(core.getInput('confidence'));
            
            const analysisData = JSON.parse(fs.readFileSync('analysis-data.json', 'utf8'));
            const aiAnalysis = JSON.parse(fs.readFileSync('ai-analysis.json', 'utf8'));
            
            // ... (rest of your script, using healthScore, burnoutRisk, confidence)
            
            const title = `${emoji} ${issueType}: Team Wellness Alert - ${analysisData.repository}`;
            
            // ... (body generation remains the same)

            // Create the issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: labels
            });
            
            console.log(`Created issue: ${issue.data.html_url}`);
            return issue.data.html_url;
 
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          health-score: ${{ steps.ai-analysis.outputs.team_health_score }}
          burnout-risk: ${{ steps.ai-analysis.outputs.burnout_risk }}
          confidence: ${{ steps.ai-analysis.outputs.confidence }}

      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with: 
          script: |
            const fs = require('fs');
            // 'github' and 'context' are available by default
            const healthScore = Number(core.getInput('health-score'));
            const burnoutRisk = core.getInput('burnout-risk');
            const confidence = Number(core.getInput('confidence'));
            
            // ... (rest of your script)

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
             
          github-token: ${{ secrets.GITHUB_TOKEN }} 
          health-score: ${{ steps.ai-analysis.outputs.team_health_score }}
          burnout-risk: ${{ steps.ai-analysis.outputs.burnout_risk }}
          confidence: ${{ steps.ai-analysis.outputs.confidence }}

      - name: Send Email Report
        if: always() 
        env:
          EMAIL_RECIPIENT: ${{ env.EMAIL_RECIPIENT }}
          HEALTH_SCORE: ${{ steps.ai-analysis.outputs.team_health_score }}
          BURNOUT_RISK: ${{ steps.ai-analysis.outputs.burnout_risk }}
          CONFIDENCE: ${{ steps.ai-analysis.outputs.confidence }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const axios = require('axios');
          
          const analysisData = JSON.parse(fs.readFileSync('analysis-data.json', 'utf8'));
          const aiAnalysis = JSON.parse(fs.readFileSync('ai-analysis.json', 'utf8'));
           
          const healthScore = process.env.HEALTH_SCORE;
          const burnoutRisk = process.env.BURNOUT_RISK;
          const confidence = process.env.CONFIDENCE;
          
          // ... (rest of your script)
          
          console.log('Email would be sent to:', process.env.EMAIL_RECIPIENT);
          // ...
          EOF

      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: burnout-analysis-report
          path: |
            github-data.json
            analysis-data.json
            ai-analysis.json
            email-report.html
          retention-days: 30

      - name: Summary
        if: always()
        run: |
          echo "## 📊 AI Burnout Detector Analysis Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Analysis Period**: ${{ env.ANALYSIS_PERIOD }} days" >> $GITHUB_STEP_SUMMARY
          echo "**Team Health Score**: ${{ steps.ai-analysis.outputs.team_health_score }}/100" >> $GITHUB_STEP_SUMMARY
          echo "**Burnout Risk**: ${{ steps.ai-analysis.outputs.burnout_risk }}" >> $GITHUB_STEP_SUMMARY
          echo "**Confidence**: ${{ steps.ai-analysis.outputs.confidence }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Commits**: ${{ steps.analyze-patterns.outputs.total_commits }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Late Night Work**: ${{ steps.analyze-patterns.outputs.late_night_commits }} commits (${{ steps.analyze-patterns.outputs.late_night_rate }}%)" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekend Work**: ${{ steps.analyze-patterns.outputs.weekend_commits }} commits (${{ steps.analyze-patterns.outputs.weekend_rate }}%)" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed Workflows**: ${{ steps.analyze-patterns.outputs.failed_workflows }} (${{ steps.analyze-patterns.outputs.failure_rate }}%)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub issue created" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Email report generated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Analysis artifacts uploaded" >> $GITHUB_STEP_SUMMARY